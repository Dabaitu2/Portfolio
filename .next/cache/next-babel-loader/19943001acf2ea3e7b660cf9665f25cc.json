{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg from '../../common/LazyLoadImg';\nexport var ProjectDetailItem = function ProjectDetailItem(props) {\n  var images = props.images,\n      title = props.title,\n      desc = props.desc,\n      tags = props.tags,\n      details = props.details,\n      mainColor = props.mainColor,\n      detail_images_meta = props.detail_images_meta,\n      video = props.video,\n      affix_image_meta = props.affix_image_meta;\n  var videoRef = React.useRef();\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      played = _React$useState2[0],\n      setPlayed = _React$useState2[1];\n\n  useEffect(function () {\n    if (videoRef.current && document) {\n      document.onscroll = function () {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (played === undefined) {\n            videoRef.current.play();\n            setPlayed(true);\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          videoRef.current.pause();\n          setPlayed(false);\n        }\n      };\n    }\n  }, [videoRef, document, played]);\n  return __jsx(\"div\", {\n    className: styles['project-detail-item'],\n    style: {\n      color: mainColor\n    }\n  }, __jsx(\"div\", {\n    className: styles['project-detail-images']\n  }, images.map(function (image) {\n    return __jsx(LazyLoadImg, _extends({}, image, {\n      className: styles['project-detail-image']\n    }));\n  })), __jsx(\"div\", null, __jsx(\"div\", {\n    className: styles['project-detail-title']\n  }, title), __jsx(\"div\", {\n    className: styles['project-detail-subtitle']\n  }, desc.map(function (d) {\n    return __jsx(\"span\", null, d);\n  }))), __jsx(\"div\", {\n    className: styles['project-detail-details'],\n    style: {\n      backgroundColor: mainColor\n    }\n  }, __jsx(\"div\", {\n    className: styles['project-detail-tags']\n  }, tags.map(function (t) {\n    return __jsx(\"span\", null, t);\n  })), __jsx(\"span\", null, details)), __jsx(\"div\", {\n    style: {\n      fontSize: 0\n    }\n  }, _Array$from({\n    length: detail_images_meta.num\n  }).map(function (_, i) {\n    if (i === 0) {\n      return;\n    }\n\n    var common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images']\n    });\n  }), video ? video.map(function (v) {\n    return __jsx(\"div\", {\n      style: {\n        width: '1600rem',\n        position: 'relative'\n      },\n      onClick: function onClick() {\n        if (played) {\n          videoRef.current.pause();\n          setPlayed(false);\n        } else {\n          videoRef.current.play();\n          setPlayed(true);\n        }\n      }\n    }, __jsx(\"div\", {\n      style: {\n        letterSpacing: '30rem',\n        fontFamily: 'Sofia Pro Regular',\n        fontSize: '100rem',\n        lineHeight: '900rem',\n        textAlign: 'center',\n        overflow: 'hidden',\n        color: '#fff',\n        position: 'absolute',\n        width: '100%',\n        display: played == true ? 'none' : 'block'\n      }\n    }, \"PAUSE\"), __jsx(\"video\", {\n      src: v.src,\n      ref: videoRef,\n      autoPlay: false,\n      style: {\n        width: '100%',\n        \"float\": 'left'\n      }\n    }));\n  }) : null, affix_image_meta ? _Array$from({\n    length: affix_image_meta.num\n  }).map(function (_, i) {\n    if (i === 0) {\n      return;\n    }\n\n    var common_file = affix_image_meta.dir + '/' + (detail_images_meta.num + i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images']\n    });\n  }) : null));\n};\nexport default ProjectDetailItem;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/Projects/ProjectDetail/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg from '../../common/LazyLoadImg';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\nexport var ProjectDetailItem = function ProjectDetailItem(props) {\n  var images = props.images,\n      title = props.title,\n      desc = props.desc,\n      tags = props.tags,\n      details = props.details,\n      mainColor = props.mainColor,\n      detail_images_meta = props.detail_images_meta,\n      video = props.video,\n      affix_image_meta = props.affix_image_meta;\n  var videoRef = React.useRef();\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      played = _React$useState2[0],\n      setPlayed = _React$useState2[1];\n\n  useComponentDidMount(function () {\n    if (videoRef.current) {\n      document.onscroll = function () {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (played === undefined) {\n            console.log(\"??????\");\n            videoRef.current.play();\n            setPlayed(true);\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          videoRef.current.pause();\n          setPlayed(false);\n        }\n      };\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles['project-detail-item'],\n    style: {\n      color: mainColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-images'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, images.map(function (image) {\n    return __jsx(LazyLoadImg, _extends({}, image, {\n      className: styles['project-detail-image'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-title'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, title), __jsx(\"div\", {\n    className: styles['project-detail-subtitle'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, desc.map(function (d) {\n    return __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, d);\n  }))), __jsx(\"div\", {\n    className: styles['project-detail-details'],\n    style: {\n      backgroundColor: mainColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-tags'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, tags.map(function (t) {\n    return __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, t);\n  })), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, details)), __jsx(\"div\", {\n    style: {\n      fontSize: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, _Array$from({\n    length: detail_images_meta.num\n  }).map(function (_, i) {\n    if (i === 0) {\n      return;\n    }\n\n    var common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }), video ? video.map(function (v) {\n    return __jsx(\"div\", {\n      style: {\n        width: '1600rem',\n        position: 'relative'\n      },\n      onClick: function onClick() {\n        if (played) {\n          videoRef.current.pause();\n          setPlayed(false);\n        } else {\n          videoRef.current.play();\n          setPlayed(true);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        letterSpacing: '30rem',\n        fontFamily: 'Sofia Pro Regular',\n        fontSize: '100rem',\n        lineHeight: '900rem',\n        textAlign: 'center',\n        overflow: 'hidden',\n        color: '#fff',\n        position: 'absolute',\n        width: '100%',\n        display: played == true ? 'none' : 'block'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"PAUSE\"), __jsx(\"video\", {\n      src: v.src,\n      ref: videoRef,\n      autoPlay: false,\n      style: {\n        width: '100%',\n        \"float\": 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }));\n  }) : null, affix_image_meta ? _Array$from({\n    length: affix_image_meta.num\n  }).map(function (_, i) {\n    if (i === 0) {\n      return;\n    }\n\n    var common_file = affix_image_meta.dir + '/' + (detail_images_meta.num + i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    });\n  }) : null));\n};\nexport default ProjectDetailItem;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/Projects/ProjectDetail/index.tsx"],"names":["React","styles","LazyLoadImg","useComponentDidMount","ProjectDetailItem","props","images","title","desc","tags","details","mainColor","detail_images_meta","video","affix_image_meta","videoRef","useRef","useState","undefined","played","setPlayed","current","document","onscroll","getBoundingClientRect","top","console","log","play","bottom","pause","color","map","image","d","backgroundColor","t","fontSize","length","num","_","i","common_file","dir","toString","type","src","v","width","position","letterSpacing","fontFamily","lineHeight","textAlign","overflow","display"],"mappings":"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","sourcesContent":["import React, { FC, useEffect } from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg, { LazyLoadImgProps } from '../../common/LazyLoadImg';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\n\nexport interface ProjectDetailInfoProps {\n  images: LazyLoadImgProps[];\n  title: string;\n  desc: string[];\n  tags: string[];\n  details: string;\n  mainColor: string;\n  detail_images_meta: {\n    dir: string;\n    num: number;\n  };\n  video?: [\n    {\n      src: string;\n    }\n  ];\n  affix_image_meta?: {\n    dir: string;\n    num: number;\n  };\n}\n\ntype IProps = ProjectDetailInfoProps;\n\nexport const ProjectDetailItem: FC<IProps> = (props: IProps) => {\n  const {\n    images,\n    title,\n    desc,\n    tags,\n    details,\n    mainColor,\n    detail_images_meta,\n    video,\n    affix_image_meta\n  } = props;\n  const videoRef = React.useRef<any>();\n  const [played, setPlayed] = React.useState<boolean | undefined>(undefined);\n  useComponentDidMount(() => {\n    if (videoRef.current) {\n      document.onscroll = () => {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (played === undefined) {\n            console.log(\"??????\");\n            videoRef.current.play();\n            setPlayed(true);\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          videoRef.current.pause();\n          setPlayed(false);\n        }\n      };\n    }\n  });\n  return (\n    <div\n      className={styles['project-detail-item']}\n      style={{\n        color: mainColor\n      }}\n    >\n      <div className={styles['project-detail-images']}>\n        {images.map(image => (\n          <LazyLoadImg {...image} className={styles['project-detail-image']} />\n        ))}\n      </div>\n      <div>\n        <div className={styles['project-detail-title']}>{title}</div>\n        <div className={styles['project-detail-subtitle']}>\n          {desc.map(d => (\n            <span>{d}</span>\n          ))}\n        </div>\n      </div>\n      <div\n        className={styles['project-detail-details']}\n        style={{\n          backgroundColor: mainColor\n        }}\n      >\n        <div className={styles['project-detail-tags']}>\n          {tags.map(t => (\n            <span>{t}</span>\n          ))}\n        </div>\n        <span>{details}</span>\n      </div>\n      <div\n        style={{\n          fontSize: 0\n        }}\n      >\n        {Array.from({ length: detail_images_meta.num }).map((_, i) => {\n          if (i === 0) {\n            return;\n          }\n          const common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n          return (\n            <LazyLoadImg\n              src={common_file + '.jpg'}\n              sources={[\n                {\n                  type: 'image/webp',\n                  src: common_file + '.webp'\n                }\n              ]}\n              preview_src={common_file + '-preview.jpg'}\n              preview_sources={[\n                { type: 'image/webp', src: common_file + '-preview.webp' }\n              ]}\n              className={styles['project-detail-details-images']}\n            />\n          );\n        })}\n        {video\n          ? video.map(v => {\n              return (\n                <div\n                  style={{\n                    width: '1600rem',\n                    position: 'relative'\n                  }}\n                  onClick={() => {\n                    if (played) {\n                      videoRef.current.pause();\n                      setPlayed(false);\n                    } else {\n                      videoRef.current.play();\n                      setPlayed(true);\n                    }\n                  }}\n                >\n                  <div\n                    style={{\n                      letterSpacing: '30rem',\n                      fontFamily: 'Sofia Pro Regular',\n                      fontSize: '100rem',\n                      lineHeight: '900rem',\n                      textAlign: 'center',\n                      overflow: 'hidden',\n                      color: '#fff',\n                      position: 'absolute',\n                      width: '100%',\n                      display: played == true ? 'none' : 'block'\n                    }}\n                  >\n                    PAUSE\n                  </div>\n                  <video\n                    src={v.src}\n                    ref={videoRef}\n                    autoPlay={false}\n                    style={{\n                      width: '100%',\n                      float: 'left'\n                    }}\n                  />\n                </div>\n              );\n            })\n          : null}\n        {affix_image_meta\n          ? Array.from({ length: affix_image_meta.num }).map((_, i) => {\n              if (i === 0) {\n                return;\n              }\n              const common_file =\n                affix_image_meta.dir +\n                '/' +\n                (detail_images_meta.num + i + 1).toString();\n              return (\n                <LazyLoadImg\n                  src={common_file + '.jpg'}\n                  sources={[\n                    {\n                      type: 'image/webp',\n                      src: common_file + '.webp'\n                    }\n                  ]}\n                  preview_src={common_file + '-preview.jpg'}\n                  preview_sources={[\n                    { type: 'image/webp', src: common_file + '-preview.webp' }\n                  ]}\n                  className={styles['project-detail-details-images']}\n                />\n              );\n            })\n          : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectDetailItem;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nexport var getContext = function getContext(width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.setAttribute('width', width);\n  canvas.setAttribute('height', height);\n  return canvas.getContext('2d');\n};\nexport var getImageData = function getImageData(img) {\n  var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return new _Promise(function (resolve, reject) {\n    console.log(\"???\");\n\n    img.onload = function () {\n      var width = img.width * scale;\n      var height = img.height * scale;\n      var context = getContext(width, height);\n      context.drawImage(img, 0, 0, width, height);\n\n      var _context$getImageData = context.getImageData(0, 0, width, height),\n          data = _context$getImageData.data;\n\n      resolve(data);\n    };\n\n    var errorHandler = function errorHandler() {\n      return reject(new Error('An error occurred attempting to load image'));\n    };\n\n    img.onerror = errorHandler;\n    img.onabort = errorHandler;\n  });\n};\nexport var getCounts = function getCounts(data, ignore) {\n  var countMap = {};\n\n  for (var i = 0; i < data.length; i += 4\n  /* 4 gives us r, g, b, and a*/\n  ) {\n    var alpha = data[i + 3]; // skip FULLY transparent pixels\n\n    if (alpha === 0) continue;\n\n    var rgbComponents = _Array$from(data.subarray(i, i + 3)); // skip undefined data\n\n\n    if (rgbComponents.indexOf(undefined) !== -1) continue;\n    var color = alpha && alpha !== 255 ? \"rgba(\".concat([].concat(_toConsumableArray(rgbComponents), [alpha]).join(','), \")\") : \"rgb(\".concat(rgbComponents.join(','), \")\"); // skip colors in the ignore list\n\n    if (ignore.indexOf(color) !== -1) continue;\n\n    if (countMap[color]) {\n      countMap[color].count++;\n    } else {\n      countMap[color] = {\n        color: color,\n        count: 1\n      };\n    }\n  }\n\n  var counts = _Object$values(countMap);\n\n  return counts.sort(function (a, b) {\n    return b.count - a.count;\n  });\n};","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/utils/rgbaster/helper.ts"],"names":["getContext","width","height","canvas","document","createElement","setAttribute","getImageData","img","scale","resolve","reject","console","log","onload","context","drawImage","data","errorHandler","Error","onerror","onabort","getCounts","ignore","countMap","i","length","alpha","rgbComponents","subarray","indexOf","undefined","color","join","count","counts","sort","a","b"],"mappings":"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","sourcesContent":["export const getContext = (width, height) => {\n  const canvas = document.createElement('canvas');\n  canvas.setAttribute('width', width);\n  canvas.setAttribute('height', height);\n  return canvas.getContext('2d');\n};\n\nexport const getImageData = (\n  img: HTMLImageElement,\n  scale: number = 1\n): Promise<Uint8ClampedArray> => {\n  return new Promise((resolve, reject) => {\n    console.log(\"???\")\n    img.onload = function() {\n      const width = img.width * scale;\n      const height = img.height * scale;\n      const context = getContext(width, height);\n      context.drawImage(img, 0, 0, width, height);\n\n      const { data } = context.getImageData(0, 0, width, height);\n      resolve(data);\n    };\n\n    const errorHandler = () =>\n      reject(new Error('An error occurred attempting to load image'));\n\n    img.onerror = errorHandler;\n    img.onabort = errorHandler;\n  });\n};\n\nexport const getCounts = (data: Uint8ClampedArray, ignore: string[]): [] => {\n  const countMap = {};\n\n  for (let i = 0; i < data.length; i += 4 /* 4 gives us r, g, b, and a*/) {\n    let alpha: number = data[i + 3];\n    // skip FULLY transparent pixels\n    if (alpha === 0) continue;\n\n    let rgbComponents: number[] = Array.from(data.subarray(i, i + 3));\n\n    // skip undefined data\n    if (rgbComponents.indexOf(undefined) !== -1) continue;\n\n    let color: string =\n      alpha && alpha !== 255\n        ? `rgba(${[...rgbComponents, alpha].join(',')})`\n        : `rgb(${rgbComponents.join(',')})`;\n\n    // skip colors in the ignore list\n    if (ignore.indexOf(color) !== -1) continue;\n\n    if (countMap[color]) {\n      countMap[color].count++;\n    } else {\n      countMap[color] = { color, count: 1 };\n    }\n  }\n\n  const counts = Object.values(countMap) as [];\n  return counts.sort((a: any, b: any) => b.count - a.count);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\n\nvar LazyLoadImg = function LazyLoadImg(props) {\n  var className = props.className,\n      src = props.src,\n      sources = props.sources,\n      alt = props.alt,\n      preview_src = props.preview_src,\n      preview_sources = props.preview_sources;\n\n  var _useState = useState(false),\n      isDone = _useState[0],\n      setIsDone = _useState[1];\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, __jsx(\"picture\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, (preview_sources !== null && preview_sources !== void 0 ? preview_sources : []).map(function (s) {\n    return __jsx(\"source\", {\n      srcSet: s.src,\n      type: s.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n  }), __jsx(\"img\", {\n    src: preview_src,\n    alt: 'preview',\n    className: className,\n    style: {\n      display: isDone ? 'none' : 'show',\n      filter: 'blur(3px)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })), __jsx(\"picture\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, (sources !== null && sources !== void 0 ? sources : []).map(function (s) {\n    return __jsx(\"source\", {\n      srcSet: s.src,\n      type: s.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n  }), __jsx(\"img\", {\n    src: src,\n    alt: alt,\n    className: className,\n    style: {\n      display: isDone ? 'initial' : 'none'\n    },\n    onLoad: function onLoad() {\n      setIsDone(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })));\n};\n\nexport default LazyLoadImg;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx"],"names":["React","useState","LazyLoadImg","props","className","src","sources","alt","preview_src","preview_sources","isDone","setIsDone","map","s","type","display","filter"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;;AAiBA,IAAMC,WAAuB,GAAG,SAA1BA,WAA0B,CAACC,KAAD,EAAmB;AAAA,MACzCC,SADyC,GACsBD,KADtB,CACzCC,SADyC;AAAA,MAC9BC,GAD8B,GACsBF,KADtB,CAC9BE,GAD8B;AAAA,MACzBC,OADyB,GACsBH,KADtB,CACzBG,OADyB;AAAA,MAChBC,GADgB,GACsBJ,KADtB,CAChBI,GADgB;AAAA,MACXC,WADW,GACsBL,KADtB,CACXK,WADW;AAAA,MACEC,eADF,GACsBN,KADtB,CACEM,eADF;;AAAA,kBAErBR,QAAQ,CAAC,KAAD,CAFa;AAAA,MAE1CS,MAF0C;AAAA,MAElCC,SAFkC;;AAIjD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACF,eAAD,aAACA,eAAD,cAACA,eAAD,GAAoB,EAApB,EAAwBG,GAAxB,CAA4B,UAAAC,CAAC;AAAA,WAC5B;AAAQ,MAAA,MAAM,EAAEA,CAAC,CAACR,GAAlB;AAAuB,MAAA,IAAI,EAAEQ,CAAC,CAACC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD4B;AAAA,GAA7B,CADH,EAIE;AACE,IAAA,GAAG,EAAEN,WADP;AAEE,IAAA,GAAG,EAAE,SAFP;AAGE,IAAA,SAAS,EAAEJ,SAHb;AAIE,IAAA,KAAK,EAAE;AACLW,MAAAA,OAAO,EAAEL,MAAM,GAAG,MAAH,GAAY,MADtB;AAELM,MAAAA,MAAM,EAAE;AAFH,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACV,OAAD,aAACA,OAAD,cAACA,OAAD,GAAY,EAAZ,EAAgBM,GAAhB,CAAoB,UAAAC,CAAC;AAAA,WACpB;AAAQ,MAAA,MAAM,EAAEA,CAAC,CAACR,GAAlB;AAAuB,MAAA,IAAI,EAAEQ,CAAC,CAACC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADoB;AAAA,GAArB,CADH,EAIE;AACE,IAAA,GAAG,EAAET,GADP;AAEE,IAAA,GAAG,EAAEE,GAFP;AAGE,IAAA,SAAS,EAAEH,SAHb;AAIE,IAAA,KAAK,EAAE;AACLW,MAAAA,OAAO,EAAEL,MAAM,GAAG,SAAH,GAAe;AADzB,KAJT;AAOE,IAAA,MAAM,EAAE,kBAAM;AACZC,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAhBF,CADF;AAmCD,CAvCD;;AAyCA,eAAeT,WAAf","sourcesContent":["import React, { FC, useState } from 'react';\n\nexport interface ISources {\n  src: string;\n  type: string;\n}\nexport interface LazyLoadImgProps {\n  sources?: ISources[];\n  preview_sources?: ISources[];\n  src: string;\n  preview_src: string;\n  alt?: string;\n  className?: string;\n}\n\ntype IProps = LazyLoadImgProps;\n\nconst LazyLoadImg: FC<IProps> = (props: IProps) => {\n  const { className, src, sources, alt, preview_src, preview_sources } = props;\n  const [isDone, setIsDone] = useState(false);\n\n  return (\n    <div>\n      {/*Picture 用来处理多格式*/}\n      <picture>\n        {(preview_sources ?? []).map(s => (\n          <source srcSet={s.src} type={s.type} />\n        ))}\n        <img\n          src={preview_src}\n          alt={'preview'}\n          className={className}\n          style={{\n            display: isDone ? 'none' : 'show',\n            filter: 'blur(3px)'\n          }}\n        />\n      </picture>\n      <picture>\n        {(sources ?? []).map(s => (\n          <source srcSet={s.src} type={s.type} />\n        ))}\n        <img\n          src={src}\n          alt={alt}\n          className={className}\n          style={{\n            display: isDone ? 'initial' : 'none'\n          }}\n          onLoad={() => {\n            setIsDone(true);\n          }}\n        />\n      </picture>\n    </div>\n  );\n};\n\nexport default LazyLoadImg;\n"]},"metadata":{},"sourceType":"module"}
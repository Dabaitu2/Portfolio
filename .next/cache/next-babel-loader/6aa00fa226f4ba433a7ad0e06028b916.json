{"ast":null,"code":"var _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/Projects/ProjectDetail/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg from '../../common/LazyLoadImg';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\nexport const ProjectDetailItem = props => {\n  const {\n    images,\n    title,\n    desc,\n    tags,\n    details,\n    mainColor,\n    detail_images_meta,\n    video,\n    affix_image_meta\n  } = props;\n  const videoRef = React.useRef();\n  const played = React.useRef(false);\n  useComponentDidMount(() => {\n    if (!videoRef.current) {\n      document.onscroll = () => {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (!played.current) {\n            videoRef.current.play();\n            played.current = true;\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          if (played.current) {\n            videoRef.current.pause();\n            played.current = false;\n          }\n        }\n      };\n    }\n  });\n  return __jsx(\"div\", {\n    className: styles['project-detail-item'],\n    style: {\n      color: mainColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-images'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, images.map(image => __jsx(LazyLoadImg, _extends({}, image, {\n    className: styles['project-detail-image'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })))), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-title'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, title), __jsx(\"div\", {\n    className: styles['project-detail-subtitle'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, desc.map(d => __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, d)))), __jsx(\"div\", {\n    className: styles['project-detail-details'],\n    style: {\n      backgroundColor: mainColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-tags'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, tags.map(t => __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, t))), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, details)), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, Array.from({\n    length: detail_images_meta.num\n  }).map((_, i) => {\n    if (i === 0) {\n      return;\n    }\n\n    const common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n  }), window && video ? video.map(v => {\n    return __jsx(\"div\", {\n      style: {\n        width: '1600rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, __jsx(\"video\", {\n      src: v.src,\n      ref: videoRef,\n      autoPlay: false,\n      controls: true,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  }) : null, affix_image_meta ? Array.from({\n    length: affix_image_meta.num\n  }).map((_, i) => {\n    if (i === 0) {\n      return;\n    }\n\n    const common_file = affix_image_meta.dir + '/' + (detail_images_meta.num + i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    });\n  }) : null));\n};\nexport default ProjectDetailItem;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/Projects/ProjectDetail/index.tsx"],"names":["React","styles","LazyLoadImg","useComponentDidMount","ProjectDetailItem","props","images","title","desc","tags","details","mainColor","detail_images_meta","video","affix_image_meta","videoRef","useRef","played","current","document","onscroll","getBoundingClientRect","top","play","bottom","pause","color","map","image","d","backgroundColor","t","Array","from","length","num","_","i","common_file","dir","toString","type","src","window","v","width"],"mappings":"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","sourcesContent":["import React, { FC, useEffect } from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg, { LazyLoadImgProps } from '../../common/LazyLoadImg';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\n\nexport interface ProjectDetailInfoProps {\n  images: LazyLoadImgProps[];\n  title: string;\n  desc: string[];\n  tags: string[];\n  details: string;\n  mainColor: string;\n  detail_images_meta: {\n    dir: string;\n    num: number;\n  };\n  video?: [\n    {\n      src: string;\n    }\n  ];\n  affix_image_meta?: {\n    dir: string;\n    num: number;\n  };\n}\n\ntype IProps = ProjectDetailInfoProps;\n\nexport const ProjectDetailItem: FC<IProps> = (props: IProps) => {\n  const {\n    images,\n    title,\n    desc,\n    tags,\n    details,\n    mainColor,\n    detail_images_meta,\n    video,\n    affix_image_meta\n  } = props;\n  const videoRef = React.useRef<any>();\n  const played = React.useRef(false);\n  useComponentDidMount(() =>{\n    if (!videoRef.current) {\n      document.onscroll = () => {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (!played.current) {\n            videoRef.current.play();\n            played.current = true;\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          if (played.current) {\n            videoRef.current.pause();\n            played.current = false;\n          }\n        }\n      };\n    }\n  });\n  return (\n    <div\n      className={styles['project-detail-item']}\n      style={{\n        color: mainColor\n      }}\n    >\n      <div className={styles['project-detail-images']}>\n        {images.map(image => (\n          <LazyLoadImg {...image} className={styles['project-detail-image']} />\n        ))}\n      </div>\n      <div>\n        <div className={styles['project-detail-title']}>{title}</div>\n        <div className={styles['project-detail-subtitle']}>\n          {desc.map(d => (\n            <span>{d}</span>\n          ))}\n        </div>\n      </div>\n      <div\n        className={styles['project-detail-details']}\n        style={{\n          backgroundColor: mainColor\n        }}\n      >\n        <div className={styles['project-detail-tags']}>\n          {tags.map(t => (\n            <span>{t}</span>\n          ))}\n        </div>\n        <span>{details}</span>\n      </div>\n      <div>\n        {Array.from({ length: detail_images_meta.num }).map((_, i) => {\n          if (i === 0) {\n            return;\n          }\n          const common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n          return (\n            <LazyLoadImg\n              src={common_file + '.jpg'}\n              sources={[\n                {\n                  type: 'image/webp',\n                  src: common_file + '.webp'\n                }\n              ]}\n              preview_src={common_file + '-preview.jpg'}\n              preview_sources={[\n                { type: 'image/webp', src: common_file + '-preview.webp' }\n              ]}\n              className={styles['project-detail-details-images']}\n            />\n          );\n        })}\n        {window && video\n          ? video.map(v => {\n              return (\n                <div\n                  style={{\n                    width: '1600rem'\n                  }}\n                >\n                  <video src={v.src}  ref={videoRef} autoPlay={false} controls style={{\n                    width: '100%'\n                  }}/>\n                </div>\n              );\n            })\n          : null}\n        {affix_image_meta\n          ? Array.from({ length: affix_image_meta.num }).map((_, i) => {\n              if (i === 0) {\n                return;\n              }\n              const common_file =\n                affix_image_meta.dir +\n                '/' +\n                (detail_images_meta.num + i + 1).toString();\n              return (\n                <LazyLoadImg\n                  src={common_file + '.jpg'}\n                  sources={[\n                    {\n                      type: 'image/webp',\n                      src: common_file + '.webp'\n                    }\n                  ]}\n                  preview_src={common_file + '-preview.jpg'}\n                  preview_sources={[\n                    { type: 'image/webp', src: common_file + '-preview.webp' }\n                  ]}\n                  className={styles['project-detail-details-images']}\n                />\n              );\n            })\n          : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectDetailItem;\n"]},"metadata":{},"sourceType":"module"}
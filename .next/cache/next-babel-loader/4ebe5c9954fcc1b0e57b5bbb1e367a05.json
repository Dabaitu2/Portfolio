{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/Projects/AutoBackGroundColorSliderPage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount'; // @ts-ignore\n\nimport findMainThemeWorker from 'worker-loader?name=static/[hash].worker.js!../../../utils/workers/findMainTheme.worker';\nimport analyze from '../../../utils/rgbaster';\n\nvar AutoBackGroundColorSliderPage = function AutoBackGroundColorSliderPage(props) {\n  var src = props.src,\n      alt = props.alt;\n\n  var _useState = useState('#ffffff'),\n      backgroundColor = _useState[0],\n      setBackGroundColor = _useState[1];\n\n  useComponentDidMount(function () {\n    var img = new Image();\n    img.src = src;\n\n    img.onload = function () {\n      console.log(findMainThemeWorker);\n      var worker = new findMainThemeWorker();\n      worker.postMessage(src);\n\n      worker.onmessage = function (e) {\n        console.log(e);\n        console.log(_JSON$stringify(e));\n      };\n\n      analyze(src, img) // analyze(src)\n      .then(function (value) {\n        console.log(value);\n\n        if (value[0]) {\n          setBackGroundColor(value[0].color);\n        }\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    };\n  });\n  return __jsx(\"div\", {\n    className: 'section',\n    style: {\n      backgroundColor: backgroundColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: src,\n    alt: alt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nexport default AutoBackGroundColorSliderPage;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/Projects/AutoBackGroundColorSliderPage/index.tsx"],"names":["React","useState","useComponentDidMount","findMainThemeWorker","analyze","AutoBackGroundColorSliderPage","props","src","alt","backgroundColor","setBackGroundColor","img","Image","onload","console","log","worker","postMessage","onmessage","e","then","value","color","err"],"mappings":";;;AAAA,OAAOA,KAAP,IAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,oBAAT,QAAqC,2CAArC,C,CACA;;AACA,OAAOC,mBAAP,MAAgC,wFAAhC;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAQA,IAAMC,6BAAyC,GAAG,SAA5CA,6BAA4C,CAACC,KAAD,EAAmB;AAAA,MAC3DC,GAD2D,GAC9CD,KAD8C,CAC3DC,GAD2D;AAAA,MACtDC,GADsD,GAC9CF,KAD8C,CACtDE,GADsD;;AAAA,kBAErBP,QAAQ,CAAC,SAAD,CAFa;AAAA,MAE5DQ,eAF4D;AAAA,MAE3CC,kBAF2C;;AAGnER,EAAAA,oBAAoB,CAAC,YAAM;AACzB,QAAMS,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACJ,GAAJ,GAAUA,GAAV;;AACAI,IAAAA,GAAG,CAACE,MAAJ,GAAa,YAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,mBAAZ;AACA,UAAMa,MAAM,GAAG,IAAIb,mBAAJ,EAAf;AACAa,MAAAA,MAAM,CAACC,WAAP,CAAmBV,GAAnB;;AACAS,MAAAA,MAAM,CAACE,SAAP,GAAmB,UAAAC,CAAC,EAAI;AACtBL,QAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAeI,CAAf,CAAZ;AACD,OAHD;;AAIAf,MAAAA,OAAO,CAACG,GAAD,EAAMI,GAAN,CAAP,CACE;AADF,OAEGS,IAFH,CAEQ,UAAAC,KAAK,EAAI;AACbP,QAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;;AACA,YAAIA,KAAK,CAAC,CAAD,CAAT,EAAc;AACZX,UAAAA,kBAAkB,CAACW,KAAK,CAAC,CAAD,CAAL,CAASC,KAAV,CAAlB;AACD;AACF,OAPH,WAQS,UAAAC,GAAG;AAAA,eAAIT,OAAO,CAACC,GAAR,CAAYQ,GAAZ,CAAJ;AAAA,OARZ;AASD,KAjBD;AAkBD,GArBmB,CAApB;AAsBA,SACE;AACE,IAAA,SAAS,EAAE,SADb;AAEE,IAAA,KAAK,EAAE;AACLd,MAAAA,eAAe,EAAEA;AADZ,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAK,IAAA,GAAG,EAAEF,GAAV;AAAe,IAAA,GAAG,EAAEC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAnCD;;AAqCA,eAAeH,6BAAf","sourcesContent":["import React, { FC, useRef, useState } from 'react';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\n// @ts-ignore\nimport findMainThemeWorker from 'worker-loader?name=static/[hash].worker.js!../../../utils/workers/findMainTheme.worker';\nimport analyze from '../../../utils/rgbaster';\nimport { css } from 'next/dist/build/webpack/config/blocks/css';\n\ninterface IProps {\n  src: string;\n  alt: string;\n}\n\nconst AutoBackGroundColorSliderPage: FC<IProps> = (props: IProps) => {\n  const { src, alt } = props;\n  const [backgroundColor, setBackGroundColor] = useState('#ffffff');\n  useComponentDidMount(() => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => {\n      console.log(findMainThemeWorker);\n      const worker = new findMainThemeWorker();\n      worker.postMessage(src);\n      worker.onmessage = e => {\n        console.log(e);\n        console.log(JSON.stringify(e));\n      };\n      analyze(src, img)\n        // analyze(src)\n        .then(value => {\n          console.log(value);\n          if (value[0]) {\n            setBackGroundColor(value[0].color);\n          }\n        })\n        .catch(err => console.log(err));\n    };\n  });\n  return (\n    <div\n      className={'section'}\n      style={{\n        backgroundColor: backgroundColor\n      }}\n    >\n      <img src={src} alt={alt} />\n    </div>\n  );\n};\n\nexport default AutoBackGroundColorSliderPage;\n"]},"metadata":{},"sourceType":"module"}
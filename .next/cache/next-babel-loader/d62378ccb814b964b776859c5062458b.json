{"ast":null,"code":"var _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\n\nvar LazyLoadImg = function LazyLoadImg(props) {\n  var className = props.className,\n      src = props.src,\n      sources = props.sources,\n      alt = props.alt,\n      preview_src = props.preview_src;\n\n  var _useState = useState(false),\n      isDone = _useState[0],\n      setIsDone = _useState[1];\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, !isDone ? __jsx(\"img\", {\n    src: preview_src,\n    alt: 'preview',\n    className: className,\n    style: {\n      position: 'absolute',\n      zIndex: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }) : null, __jsx(\"picture\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, isDone ? sources.map(function (s) {\n    return __jsx(\"source\", {\n      srcSet: s.src,\n      type: s.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }) : null, __jsx(\"img\", {\n    src: src,\n    alt: alt,\n    className: className,\n    onLoad: function onLoad() {\n      setIsDone(true);\n    },\n    style: {\n      position: 'absolute',\n      zIndex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }))));\n};\n\nexport default LazyLoadImg;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx"],"names":["React","useState","LazyLoadImg","props","className","src","sources","alt","preview_src","isDone","setIsDone","position","zIndex","map","s","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;;AAcA,IAAMC,WAAuB,GAAG,SAA1BA,WAA0B,CAACC,KAAD,EAAmB;AAAA,MACzCC,SADyC,GACKD,KADL,CACzCC,SADyC;AAAA,MAC9BC,GAD8B,GACKF,KADL,CAC9BE,GAD8B;AAAA,MACzBC,OADyB,GACKH,KADL,CACzBG,OADyB;AAAA,MAChBC,GADgB,GACKJ,KADL,CAChBI,GADgB;AAAA,MACXC,WADW,GACKL,KADL,CACXK,WADW;;AAAA,kBAErBP,QAAQ,CAAC,KAAD,CAFa;AAAA,MAE1CQ,MAF0C;AAAA,MAElCC,SAFkC;;AAIjD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAACF,MAAD,GACC;AACE,IAAA,GAAG,EAAED,WADP;AAEE,IAAA,GAAG,EAAE,SAFP;AAGE,IAAA,SAAS,EAAEJ,SAHb;AAIE,IAAA,KAAK,EAAE;AACLO,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,MAAM,EAAE;AAFH,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAUG,IAfN,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,MAAM,GACHH,OAAO,CAACO,GAAR,CAAY,UAAAC,CAAC;AAAA,WAAI;AAAQ,MAAA,MAAM,EAAEA,CAAC,CAACT,GAAlB;AAAuB,MAAA,IAAI,EAAES,CAAC,CAACC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ;AAAA,GAAb,CADG,GAEH,IAHN,EAIE;AACE,IAAA,GAAG,EAAEV,GADP;AAEE,IAAA,GAAG,EAAEE,GAFP;AAGE,IAAA,SAAS,EAAEH,SAHb;AAIE,IAAA,MAAM,EAAE,kBAAM;AACZM,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KANH;AAOE,IAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,MAAM,EAAE;AAFH,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAhBF,CADF,CADF;AAsCD,CA1CD;;AA4CA,eAAeV,WAAf","sourcesContent":["import React, { FC, useState } from 'react';\n\nexport interface ISources {\n  src: string;\n  type: string;\n}\ninterface IProps {\n  sources: ISources[];\n  src: string;\n  preview_src: string;\n  alt?: string;\n  className?: string;\n}\n\nconst LazyLoadImg: FC<IProps> = (props: IProps) => {\n  const { className, src, sources, alt, preview_src } = props;\n  const [isDone, setIsDone] = useState(false);\n\n  return (\n    <div>\n      <div\n        style={{\n          position: 'relative'\n        }}\n      >\n        {!isDone ? (\n          <img\n            src={preview_src}\n            alt={'preview'}\n            className={className}\n            style={{\n              position: 'absolute',\n              zIndex: 10\n            }}\n          />\n        ) : null}\n        <picture>\n          {isDone\n            ? sources.map(s => <source srcSet={s.src} type={s.type} />)\n            : null}\n          <img\n            src={src}\n            alt={alt}\n            className={className}\n            onLoad={() => {\n              setIsDone(true);\n            }}\n            style={{\n              position: 'absolute',\n              zIndex: 1\n            }}\n          />\n        </picture>\n      </div>\n    </div>\n  );\n};\n\nexport default LazyLoadImg;\n"]},"metadata":{},"sourceType":"module"}
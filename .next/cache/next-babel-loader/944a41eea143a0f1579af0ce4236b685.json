{"ast":null,"code":"export const getContext = (width, height) => {\n  const canvas = document.createElement('canvas');\n  canvas.setAttribute('width', width);\n  canvas.setAttribute('height', height);\n  return canvas.getContext('2d');\n};\nexport const getImageData = (src, scale = 1) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    img.onload = function () {\n      const width = img.width * scale;\n      const height = img.height * scale;\n      const context = getContext(width, height);\n      context.drawImage(img, 0, 0, width, height);\n      const {\n        data\n      } = context.getImageData(0, 0, width, height);\n      resolve(data);\n    };\n\n    const errorHandler = () => reject(new Error('An error occurred attempting to load image'));\n\n    img.onerror = errorHandler;\n    img.onabort = errorHandler;\n    img.src = src;\n  });\n};\nexport const getCounts = (data, ignore) => {\n  const countMap = {};\n\n  for (let i = 0; i < data.length; i += 4\n  /* 4 gives us r, g, b, and a*/\n  ) {\n    let alpha = data[i + 3]; // skip FULLY transparent pixels\n\n    if (alpha === 0) continue;\n    let rgbComponents = Array.from(data.subarray(i, i + 3)); // skip undefined data\n\n    if (rgbComponents.indexOf(undefined) !== -1) continue;\n    let color = alpha && alpha !== 255 ? `rgba(${[...rgbComponents, alpha].join(',')})` : `rgb(${rgbComponents.join(',')})`; // skip colors in the ignore list\n\n    if (ignore.indexOf(color) !== -1) continue;\n\n    if (countMap[color]) {\n      countMap[color].count++;\n    } else {\n      countMap[color] = {\n        color,\n        count: 1\n      };\n    }\n  }\n\n  const counts = Object.values(countMap);\n  return counts.sort((a, b) => b.count - a.count);\n};","map":null,"metadata":{},"sourceType":"module"}
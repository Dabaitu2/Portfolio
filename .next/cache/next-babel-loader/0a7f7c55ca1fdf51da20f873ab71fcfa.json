{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nlet initStore = {\n  currentTab: {\n    currentTab: 0\n  },\n  scale: {\n    scale: 1\n  },\n  test: {\n    count: 0\n  }\n};\n\nconst currentTab = (state, action) => {\n  if (action.type === 'setCurrentTab') {\n    return _objectSpread({}, state, {\n      currentTab: action.value\n    });\n  } else {\n    return state;\n  }\n};\n\nconst test = (state, action) => {\n  if (action.type === 'increment') {\n    return _objectSpread({}, state, {\n      count: state.count + action.value\n    });\n  } else {\n    return state;\n  }\n};\n\nconst scale = (state, action) => {\n  if (action.type === 'setScale') {\n    return _objectSpread({}, state, {\n      scale: action.value\n    });\n  } else {\n    return state;\n  }\n}; // 自定义合并reducer函数\n// 根据reducer定义的名称，拿到state中的对应名称下的state\n// state 也是一个复合 state\n// 返回值依然是个函数\n\n\nconst combineReducers = reducers => (state, action) => Object.keys(reducers) // 拿到的state只是属于自己的key的那部分\n// 对每个reducer 都执行一次处理, 将结果存为新的state[key]\n.map(k => ({\n  [k]: reducers[k](state[k], action)\n})) // 整合出新state返回，看起来就像是一个reducer在干活\n.reduce((acc, cur) => Object.assign({}, acc, cur));\n\nconst reducers = combineReducers({\n  currentTab,\n  test,\n  scale\n});\nexport function createCurrentTab(_initStore) {\n  const CurrentTabContext = React.createContext(null);\n\n  function CurrentTabProvider(props) {\n    const [state, dispatch] = React.useReducer(reducers, _initStore ? _objectSpread({}, initStore, {}, _initStore) : initStore);\n    const actions = {\n      setCurrentTab: e => {\n        dispatch({\n          type: 'setCurrentTab',\n          value: e\n        });\n      },\n      setScale: e => {\n        dispatch({\n          type: 'setScale',\n          value: e\n        });\n      }\n    };\n    return __jsx(CurrentTabContext.Provider, {\n      value: {\n        state,\n        actions\n      }\n    }, props.children);\n  }\n\n  function useCurrentTab() {\n    let value = React.useContext(CurrentTabContext);\n\n    if (!value) {\n      throw new Error('Component must be wrapped with <CurrentTabProvider>');\n    }\n\n    return value;\n  }\n\n  return {\n    CurrentTabProvider,\n    useCurrentTab\n  };\n}\nconst {\n  CurrentTabProvider,\n  useCurrentTab\n} = createCurrentTab();\nexport { CurrentTabProvider, useCurrentTab };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport var useComponentDidMount = function useComponentDidMount(handler, postHandler) {\n  var _useState = useState(false),\n      firstLoaded = _useState[0],\n      setFirstLoaded = _useState[1];\n\n  var _useState2 = useState(false),\n      IsDone = _useState2[0],\n      setIsDone = _useState2[1];\n\n  useEffect(function () {\n    if (!firstLoaded) {\n      setFirstLoaded(true);\n    }\n  }, []);\n  useEffect(function () {\n    if (firstLoaded) {\n      handler();\n      setIsDone(true);\n      return postHandler ? function () {\n        return postHandler();\n      } : function () {\n        return null;\n      };\n    }\n\n    return;\n  }, [firstLoaded]);\n  return {\n    firstLoaded: firstLoaded,\n    IsDone: IsDone,\n    setIsDone: setIsDone\n  };\n};","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/utils/hooks/useComponentDidMount.ts"],"names":["useEffect","useState","useComponentDidMount","handler","postHandler","firstLoaded","setFirstLoaded","IsDone","setIsDone"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCC,OADkC,EAElCC,WAFkC,EAG/B;AAAA,kBACmCH,QAAQ,CAAC,KAAD,CAD3C;AAAA,MACII,WADJ;AAAA,MACiBC,cADjB;;AAAA,mBAEyBL,QAAQ,CAAC,KAAD,CAFjC;AAAA,MAEIM,MAFJ;AAAA,MAEYC,SAFZ;;AAGHR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACK,WAAL,EAAkB;AAChBC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAKAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,WAAJ,EAAiB;AACfF,MAAAA,OAAO;AACPK,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA,aAAOJ,WAAW,GAAG;AAAA,eAAMA,WAAW,EAAjB;AAAA,OAAH,GAAyB;AAAA,eAAM,IAAN;AAAA,OAA3C;AACD;;AACD;AACD,GAPQ,EAON,CAACC,WAAD,CAPM,CAAT;AAQA,SAAO;AAAEA,IAAAA,WAAW,EAAXA,WAAF;AAAeE,IAAAA,MAAM,EAANA,MAAf;AAAuBC,IAAAA,SAAS,EAATA;AAAvB,GAAP;AACD,CApBM","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useComponentDidMount = (\n  handler: () => any,\n  postHandler?: () => any\n) => {\n  const [firstLoaded, setFirstLoaded] = useState(false);\n  const [IsDone, setIsDone] = useState(false);\n  useEffect(() => {\n    if (!firstLoaded) {\n      setFirstLoaded(true);\n    }\n  }, []);\n  useEffect(() => {\n    if (firstLoaded) {\n      handler();\n      setIsDone(true);\n      return postHandler ? () => postHandler() : () => null;\n    }\n    return;\n  }, [firstLoaded]);\n  return { firstLoaded, IsDone, setIsDone };\n};\n"]},"metadata":{},"sourceType":"module"}
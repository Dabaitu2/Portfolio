{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nexport var getContext = function getContext(width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.setAttribute('width', width);\n  canvas.setAttribute('height', height);\n  return canvas.getContext('2d');\n};\nexport var getImageData = function getImageData(src) {\n  var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return new _Promise(function (resolve, reject) {\n    var img = new Image();\n\n    img.onload = function () {\n      var width = img.width * scale;\n      var height = img.height * scale;\n      var context = getContext(width, height);\n      context.drawImage(img, 0, 0, width, height);\n\n      var _context$getImageData = context.getImageData(0, 0, width, height),\n          data = _context$getImageData.data;\n\n      resolve(data);\n    };\n\n    var errorHandler = function errorHandler() {\n      return reject(new Error('An error occurred attempting to load image'));\n    };\n\n    img.onerror = errorHandler;\n    img.onabort = errorHandler;\n    img.src = src;\n  });\n};\nexport var getCounts = function getCounts(data, ignore) {\n  var countMap = {};\n\n  for (var i = 0; i < data.length; i += 4\n  /* 4 gives us r, g, b, and a*/\n  ) {\n    var alpha = data[i + 3]; // skip FULLY transparent pixels\n\n    if (alpha === 0) continue;\n\n    var rgbComponents = _Array$from(data.subarray(i, i + 3)); // skip undefined data\n\n\n    if (rgbComponents.indexOf(undefined) !== -1) continue;\n    var color = alpha && alpha !== 255 ? \"rgba(\".concat([].concat(_toConsumableArray(rgbComponents), [alpha]).join(','), \")\") : \"rgb(\".concat(rgbComponents.join(','), \")\"); // skip colors in the ignore list\n\n    if (ignore.indexOf(color) !== -1) continue;\n\n    if (countMap[color]) {\n      countMap[color].count++;\n    } else {\n      countMap[color] = {\n        color: color,\n        count: 1\n      };\n    }\n  }\n\n  var counts = _Object$values(countMap);\n\n  return counts.sort(function (a, b) {\n    return b.count - a.count;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}
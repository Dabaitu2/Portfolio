{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getImageData, getCounts } from './helper';\nconst defaultOpts = {\n  ignore: [],\n  scale: 1\n};\nexport default async function (src, img, opts = defaultOpts) {\n  opts = _objectSpread({}, defaultOpts, {}, opts);\n  const {\n    ignore,\n    // for example, to ignore white and black:  [ 'rgb(0,0,0)', 'rgb(255,255,255)' ]\n    scale // 0 = best performance, lowest fidelity\n    // 1 = best fidelity, worst performance\n\n  } = opts;\n\n  if (scale > 1 || scale <= 0) {\n    console.warn(`You set scale to ${scale}, which isn't between 0-1. This is either pointless (> 1) or a no-op (≤ 0)`);\n  }\n\n  const data = await getImageData(src, img, scale);\n  return getCounts(data, ignore);\n}","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/utils/rgbaster/index.ts"],"names":["getImageData","getCounts","defaultOpts","ignore","scale","src","img","opts","console","warn","data"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,SAAvB,QAAwC,UAAxC;AAQA,MAAMC,WAAiB,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,KAAK,EAAE;AAFiB,CAA1B;AAKA,eAAe,gBACbC,GADa,EAEbC,GAFa,EAGbC,IAAU,GAAGL,WAHA,EAIgC;AAC7CK,EAAAA,IAAI,qBAAQL,WAAR,MAAwBK,IAAxB,CAAJ;AAEA,QAAM;AACJJ,IAAAA,MADI;AACI;AACRC,IAAAA,KAFI,CAEE;AACN;;AAHI,MAIFG,IAJJ;;AAMA,MAAIH,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,CAA1B,EAA6B;AAC3BI,IAAAA,OAAO,CAACC,IAAR,CACG,oBAAmBL,KAAM,4EAD5B;AAGD;;AAED,QAAMM,IAAI,GAAG,MAAMV,YAAY,CAACK,GAAD,EAAMC,GAAN,EAAWF,KAAX,CAA/B;AACA,SAAOH,SAAS,CAACS,IAAD,EAAOP,MAAP,CAAhB;AACD","sourcesContent":["import { getImageData, getCounts } from './helper';\n\ninterface Opts {\n  ignore?: string[];\n  scale?: number;\n  skipTransparentPixels?: boolean;\n}\n\nconst defaultOpts: Opts = {\n  ignore: [],\n  scale: 1\n};\n\nexport default async function(\n  src: string,\n  img: HTMLImageElement,\n  opts: Opts = defaultOpts\n): Promise<{ color: string; count: number }[]> {\n  opts = { ...defaultOpts, ...opts };\n\n  const {\n    ignore, // for example, to ignore white and black:  [ 'rgb(0,0,0)', 'rgb(255,255,255)' ]\n    scale // 0 = best performance, lowest fidelity\n    // 1 = best fidelity, worst performance\n  } = opts;\n\n  if (scale > 1 || scale <= 0) {\n    console.warn(\n      `You set scale to ${scale}, which isn't between 0-1. This is either pointless (> 1) or a no-op (≤ 0)`\n    );\n  }\n\n  const data = await getImageData(src, img, scale);\n  return getCounts(data, ignore);\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg from '../../common/LazyLoadImg';\nimport { useResizeCallback } from '../../../utils/hooks/useResizeCallback';\nimport { useForceUpdate } from '../../../utils/hooks/useForceUpdate';\nimport throttle from 'lodash/throttle';\nexport const ProjectDetailItem = props => {\n  const {\n    images,\n    title,\n    desc,\n    links,\n    tags,\n    details,\n    mainColor,\n    detail_images_meta,\n    video,\n    affix_image_meta\n  } = props;\n  const videoRef = React.useRef({\n    duration: 0,\n    currentTime: 0,\n    fake: true\n  });\n  const [played, setPlayed] = React.useState(undefined);\n  const [visible, setVisible] = React.useState(false);\n  const {\n    forceUpdate\n  } = useForceUpdate();\n  const [progress, setProgress] = React.useState(0);\n  useEffect(() => {\n    if (!videoRef.current.fake && document) {\n      document.onscroll = () => {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (played === undefined) {\n            videoRef.current.play();\n            setPlayed(true);\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          videoRef.current.pause();\n          setPlayed(false);\n        }\n      };\n    }\n  }, [videoRef.current, document, played]);\n  const {\n    addMustExecuteCallback\n  } = useResizeCallback();\n  addMustExecuteCallback(() => {\n    forceUpdate();\n  });\n  useEffect(() => {\n    const handleTimeUpdate = throttle(() => {\n      setProgress(videoRef.current.currentTime / videoRef.current.duration * 100);\n    }, 500);\n\n    if (!videoRef.current.fake) {\n      videoRef.current.addEventListener('timeupdate', handleTimeUpdate);\n    }\n  }, [videoRef.current, setProgress]);\n  return __jsx(\"div\", {\n    className: styles['project-detail-item'],\n    style: {\n      color: mainColor\n    }\n  }, __jsx(\"div\", {\n    className: styles['project-detail-images']\n  }, images.map(image => __jsx(LazyLoadImg, _extends({}, image, {\n    className: styles['project-detail-image']\n  })))), __jsx(\"div\", null, __jsx(\"div\", {\n    className: styles['project-detail-title']\n  }, title), __jsx(\"div\", {\n    className: styles['project-detail-subtitle']\n  }, desc.map(d => __jsx(\"span\", null, d)))), __jsx(\"div\", {\n    className: styles['project-detail-details'],\n    style: {\n      backgroundColor: mainColor\n    }\n  }, __jsx(\"div\", {\n    className: styles['project-detail-tags']\n  }, tags.map(t => __jsx(\"span\", null, t))), details.length > 0 && __jsx(\"span\", {\n    className: styles['project-detail-details-desc']\n  }, details)), __jsx(\"div\", {\n    style: {\n      fontSize: 0\n    }\n  }, Array.from({\n    length: detail_images_meta.num\n  }).map((_, i) => {\n    if (i === 0) {\n      return;\n    }\n\n    const common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images']\n    });\n  }), links && links.map(link => __jsx(\"a\", {\n    className: link.className,\n    href: link.src,\n    target: 'blank'\n  }, link.desc)), video ? video.map(v => {\n    return __jsx(\"div\", {\n      style: {\n        width: '1600rem',\n        position: 'relative',\n        height: '900rem',\n        transition: '0.3s ease-in-out',\n        filter: played == true ? 'none' : 'opacity(0.9)'\n      },\n      onMouseEnter: () => {\n        setVisible(true);\n      },\n      onMouseLeave: () => {\n        setVisible(false);\n      },\n      onClick: () => {\n        if (played) {\n          videoRef.current.pause();\n          setPlayed(false);\n        } else {\n          videoRef.current.play();\n          setPlayed(true);\n        }\n      }\n    }, __jsx(\"div\", {\n      className: styles['project-detail-stop-icon'],\n      style: {\n        display: played == true ? 'none' : 'block'\n      }\n    }, \"PAUSE\"), __jsx(\"div\", {\n      style: {\n        transition: '.4s ease',\n        opacity: visible ? 1 : 0\n      },\n      className: styles['project-detail-video-control-bar']\n    }, __jsx(\"div\", {\n      className: styles['bar']\n    }, __jsx(\"div\", {\n      className: styles['progress'],\n      style: {\n        width: progress + '%'\n      }\n    }))), __jsx(\"video\", {\n      src: v.src,\n      ref: videoRef,\n      autoPlay: false,\n      style: {\n        width: '1600rem',\n        float: 'left'\n      }\n    }));\n  }) : null, affix_image_meta ? Array.from({\n    length: affix_image_meta.num\n  }).map((_, i) => {\n    if (i === 0) {\n      return;\n    }\n\n    const common_file = affix_image_meta.dir + '/' + (detail_images_meta.num + i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images']\n    });\n  }) : null));\n};\nexport default ProjectDetailItem;","map":null,"metadata":{},"sourceType":"module"}
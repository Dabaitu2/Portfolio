{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nvar initStore = {\n  currentTab: {\n    currentTab: 0\n  },\n  scale: {\n    scale: 1\n  },\n  test: {\n    count: 0\n  }\n};\n\nvar currentTab = function currentTab(state, action) {\n  if (action.type === 'setCurrentTab') {\n    return _objectSpread({}, state, {\n      currentTab: action.value\n    });\n  } else {\n    return state;\n  }\n};\n\nvar test = function test(state, action) {\n  if (action.type === 'increment') {\n    return _objectSpread({}, state, {\n      count: state.count + action.value\n    });\n  } else {\n    return state;\n  }\n};\n\nvar scale = function scale(state, action) {\n  if (action.type === 'setScale') {\n    return _objectSpread({}, state, {\n      scale: action.value\n    });\n  } else {\n    return state;\n  }\n}; // 自定义合并reducer函数\n// 根据reducer定义的名称，拿到state中的对应名称下的state\n// state 也是一个复合 state\n// 返回值依然是个函数\n\n\nvar combineReducers = function combineReducers(reducers) {\n  return function (state, action) {\n    return _Object$keys(reducers) // 拿到的state只是属于自己的key的那部分\n    // 对每个reducer 都执行一次处理, 将结果存为新的state[key]\n    .map(function (k) {\n      return _defineProperty({}, k, reducers[k](state[k], action));\n    }) // 整合出新state返回，看起来就像是一个reducer在干活\n    .reduce(function (acc, cur) {\n      return _Object$assign({}, acc, cur);\n    });\n  };\n};\n\nvar reducers = combineReducers({\n  currentTab: currentTab,\n  test: test,\n  scale: scale\n});\nexport function createCurrentTab() {\n  var CurrentTabContext = React.createContext(null);\n\n  function CurrentTabProvider(props) {\n    var _React$useReducer = React.useReducer(reducers, initStore),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n    var actions = {\n      setCurrentTab: function setCurrentTab(e) {\n        dispatch({\n          type: 'setCurrentTab',\n          value: e\n        });\n      },\n      setScale: function setScale(e) {\n        dispatch({\n          type: 'setScale',\n          value: e\n        });\n      }\n    };\n    return __jsx(CurrentTabContext.Provider, {\n      value: {\n        state: state,\n        actions: actions\n      }\n    }, props.children);\n  }\n\n  function useCurrentTab() {\n    var value = React.useContext(CurrentTabContext);\n\n    if (!value) {\n      throw new Error('Component must be wrapped with <CurrentTabProvider>');\n    }\n\n    return value;\n  }\n\n  return {\n    CurrentTabProvider: CurrentTabProvider,\n    useCurrentTab: useCurrentTab\n  };\n}\n\nvar _createCurrentTab = createCurrentTab(),\n    CurrentTabProvider = _createCurrentTab.CurrentTabProvider,\n    useCurrentTab = _createCurrentTab.useCurrentTab;\n\nexport { CurrentTabProvider, useCurrentTab };","map":null,"metadata":{},"sourceType":"module"}
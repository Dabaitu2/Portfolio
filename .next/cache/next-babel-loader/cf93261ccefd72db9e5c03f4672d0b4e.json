{"ast":null,"code":"var _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\n\nconst LazyLoadImg = props => {\n  const {\n    className,\n    src,\n    sources,\n    alt,\n    preview_src\n  } = props;\n  const {\n    0: isDone,\n    1: setIsDone\n  } = useState(false);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: preview_src,\n    alt: 'preview',\n    className: className,\n    style: {\n      position: 'absolute',\n      zIndex: 10,\n      display: isDone ? 'none' : 'show'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), __jsx(\"picture\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, isDone ? sources.map(s => __jsx(\"source\", {\n    srcSet: s.src,\n    type: s.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })) : null)));\n};\n\nexport default LazyLoadImg;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx"],"names":["React","useState","LazyLoadImg","props","className","src","sources","alt","preview_src","isDone","setIsDone","position","zIndex","display","map","s","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;;AAcA,MAAMC,WAAuB,GAAIC,KAAD,IAAmB;AACjD,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,GAAb;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,GAA3B;AAAgCC,IAAAA;AAAhC,MAAgDL,KAAtD;AACA,QAAM;AAAA,OAACM,MAAD;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAAC,KAAD,CAApC;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAE;AACLU,MAAAA,QAAQ,EAAE;AADL,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AACE,IAAA,GAAG,EAAEH,WADP;AAEE,IAAA,GAAG,EAAE,SAFP;AAGE,IAAA,SAAS,EAAEJ,SAHb;AAIE,IAAA,KAAK,EAAE;AACLO,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,MAAM,EAAE,EAFH;AAGLC,MAAAA,OAAO,EAAEJ,MAAM,GAAG,MAAH,GAAY;AAHtB,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MAAM,GACHH,OAAO,CAACQ,GAAR,CAAYC,CAAC,IAAI;AAAQ,IAAA,MAAM,EAAEA,CAAC,CAACV,GAAlB;AAAuB,IAAA,IAAI,EAAEU,CAAC,CAACC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB,CADG,GAEH,IAHN,CAfF,CADF,CADF;AAqCD,CAzCD;;AA2CA,eAAed,WAAf","sourcesContent":["import React, { FC, useState } from 'react';\n\nexport interface ISources {\n  src: string;\n  type: string;\n}\ninterface IProps {\n  sources: ISources[];\n  src: string;\n  preview_src: string;\n  alt?: string;\n  className?: string;\n}\n\nconst LazyLoadImg: FC<IProps> = (props: IProps) => {\n  const { className, src, sources, alt, preview_src } = props;\n  const [isDone, setIsDone] = useState(false);\n\n  return (\n    <div>\n      <div\n        style={{\n          position: 'relative'\n        }}\n      >\n        <img\n          src={preview_src}\n          alt={'preview'}\n          className={className}\n          style={{\n            position: 'absolute',\n            zIndex: 10,\n            display: isDone ? 'none' : 'show'\n          }}\n        />\n        <picture>\n          {isDone\n            ? sources.map(s => <source srcSet={s.src} type={s.type} />)\n            : null}\n          {/*<img*/}\n          {/*  src={src}*/}\n          {/*  alt={alt}*/}\n          {/*  className={className}*/}\n          {/*  onLoad={() => {*/}\n          {/*    setIsDone(true);*/}\n          {/*  }}*/}\n          {/*  style={{*/}\n          {/*    position: 'absolute',*/}\n          {/*    zIndex: 1*/}\n          {/*  }}*/}\n          {/*/>*/}\n        </picture>\n      </div>\n    </div>\n  );\n};\n\nexport default LazyLoadImg;\n"]},"metadata":{},"sourceType":"module"}
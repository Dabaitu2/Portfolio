{"ast":null,"code":"var _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\n\nconst LazyLoadImg = props => {\n  const {\n    className,\n    src,\n    sources,\n    alt,\n    preview_src\n  } = props;\n  const {\n    0: isDone,\n    1: setIsDone\n  } = useState(false);\n  useComponentDidMount(() => {\n    const image = new Image();\n    image.src = src;\n\n    image.onload = () => {\n      setIsDone(true);\n    };\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(\"picture\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, sources.map(s => __jsx(\"source\", {\n    srcSet: s.src,\n    type: s.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })), __jsx(\"img\", {\n    src: isDone ? src : preview_src,\n    alt: alt,\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })));\n};\n\nexport default LazyLoadImg;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/common/LazyLoadImg/index.tsx"],"names":["React","useState","useComponentDidMount","LazyLoadImg","props","className","src","sources","alt","preview_src","isDone","setIsDone","image","Image","onload","map","s","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,oBAAT,QAAqC,2CAArC;;AAcA,MAAMC,WAAuB,GAAIC,KAAD,IAAmB;AACjD,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,GAAb;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,GAA3B;AAAgCC,IAAAA;AAAhC,MAAgDL,KAAtD;AACA,QAAM;AAAA,OAACM,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC,KAAD,CAApC;AACAC,EAAAA,oBAAoB,CAAC,MAAM;AACzB,UAAMU,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,IAAAA,KAAK,CAACN,GAAN,GAAYA,GAAZ;;AACAM,IAAAA,KAAK,CAACE,MAAN,GAAe,MAAM;AACnBH,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAFD;AAGD,GANmB,CAApB;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,OAAO,CAACQ,GAAR,CAAYC,CAAC,IACZ;AAAQ,IAAA,MAAM,EAAEA,CAAC,CAACV,GAAlB;AAAuB,IAAA,IAAI,EAAEU,CAAC,CAACC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,EAIE;AAAK,IAAA,GAAG,EAAEP,MAAM,GAAGJ,GAAH,GAASG,WAAzB;AAAsC,IAAA,GAAG,EAAED,GAA3C;AAAgD,IAAA,SAAS,EAAEH,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF;AAUD,CArBD;;AAuBA,eAAeF,WAAf","sourcesContent":["import React, { FC, useState } from 'react';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\n\nexport interface ISources {\n  src: string;\n  type: string;\n}\ninterface IProps {\n  sources: ISources[];\n  src: string;\n  preview_src: string;\n  alt?: string;\n  className?: string;\n}\n\nconst LazyLoadImg: FC<IProps> = (props: IProps) => {\n  const { className, src, sources, alt, preview_src } = props;\n  const [isDone, setIsDone] = useState(false);\n  useComponentDidMount(() => {\n    const image = new Image();\n    image.src = src;\n    image.onload = () => {\n      setIsDone(true);\n    };\n  });\n\n  return (\n    <div>\n      <picture>\n        {sources.map(s => (\n          <source srcSet={s.src} type={s.type} />\n        ))}\n        <img src={isDone ? src : preview_src} alt={alt} className={className} />\n      </picture>\n    </div>\n  );\n};\n\nexport default LazyLoadImg;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/tomokokawase/Desktop/Portfolio/components/Projects/ProjectDetail/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg from '../../common/LazyLoadImg';\nimport { useResizeCallback } from '../../../utils/hooks/useResizeCallback';\nimport { useForceUpdate } from '../../../utils/hooks/useForceUpdate';\nimport throttle from 'lodash/throttle';\nexport const ProjectDetailItem = props => {\n  const {\n    images,\n    title,\n    desc,\n    links,\n    tags,\n    details,\n    mainColor,\n    detail_images_meta,\n    video,\n    affix_image_meta\n  } = props;\n  const videoRef = React.useRef({\n    duration: 0,\n    currentTime: 0,\n    fake: true\n  });\n  const [played, setPlayed] = React.useState(undefined);\n  const [visible, setVisible] = React.useState(false);\n  const {\n    forceUpdate\n  } = useForceUpdate();\n  const [progress, setProgress] = React.useState(0);\n  useEffect(() => {\n    if (!videoRef.current.fake && document) {\n      document.onscroll = () => {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (played === undefined) {\n            videoRef.current.play();\n            setPlayed(true);\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          videoRef.current.pause();\n          setPlayed(false);\n        }\n      };\n    }\n  }, [videoRef.current, document, played]);\n  const {\n    addMustExecuteCallback\n  } = useResizeCallback();\n  addMustExecuteCallback(() => {\n    forceUpdate();\n  });\n  useEffect(() => {\n    const handleTimeUpdate = throttle(() => {\n      setProgress(videoRef.current.currentTime / videoRef.current.duration * 100);\n    }, 500);\n\n    if (!videoRef.current.fake) {\n      videoRef.current.addEventListener('timeupdate', handleTimeUpdate);\n    }\n  }, [videoRef.current, setProgress]);\n  return __jsx(\"div\", {\n    className: styles['project-detail-item'],\n    style: {\n      color: mainColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-images'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, images.map(image => __jsx(LazyLoadImg, _extends({}, image, {\n    className: styles['project-detail-image'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })))), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-title'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, title), __jsx(\"div\", {\n    className: styles['project-detail-subtitle'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, desc.map(d => __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, d)))), __jsx(\"div\", {\n    className: styles['project-detail-details'],\n    style: {\n      backgroundColor: mainColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: styles['project-detail-tags'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, tags.map(t => __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, t))), details.length > 0 && __jsx(\"span\", {\n    className: styles['project-detail-details-desc'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, details)), __jsx(\"div\", {\n    style: {\n      fontSize: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, Array.from({\n    length: detail_images_meta.num\n  }).map((_, i) => {\n    if (i === 0) {\n      return;\n    }\n\n    const common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    });\n  }), links.map(link => __jsx(\"a\", {\n    className: link.className,\n    href: link.src,\n    target: 'blank',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, link.desc)), video ? video.map(v => {\n    return __jsx(\"div\", {\n      style: {\n        width: '1600rem',\n        position: 'relative',\n        height: '900rem',\n        transition: '0.3s ease-in-out',\n        filter: played == true ? 'none' : 'opacity(0.9)'\n      },\n      onMouseEnter: () => {\n        setVisible(true);\n      },\n      onMouseLeave: () => {\n        setVisible(false);\n      },\n      onClick: () => {\n        if (played) {\n          videoRef.current.pause();\n          setPlayed(false);\n        } else {\n          videoRef.current.play();\n          setPlayed(true);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: styles['project-detail-stop-icon'],\n      style: {\n        display: played == true ? 'none' : 'block'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"PAUSE\"), __jsx(\"div\", {\n      style: {\n        transition: '.4s ease',\n        opacity: visible ? 1 : 0\n      },\n      className: styles['project-detail-video-control-bar'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: styles['bar'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: styles['progress'],\n      style: {\n        width: progress + '%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }))), __jsx(\"video\", {\n      src: v.src,\n      ref: videoRef,\n      autoPlay: false,\n      style: {\n        width: '1600rem',\n        float: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }));\n  }) : null, affix_image_meta ? Array.from({\n    length: affix_image_meta.num\n  }).map((_, i) => {\n    if (i === 0) {\n      return;\n    }\n\n    const common_file = affix_image_meta.dir + '/' + (detail_images_meta.num + i + 1).toString();\n    return __jsx(LazyLoadImg, {\n      src: common_file + '.jpg',\n      sources: [{\n        type: 'image/webp',\n        src: common_file + '.webp'\n      }],\n      preview_src: common_file + '-preview.jpg',\n      preview_sources: [{\n        type: 'image/webp',\n        src: common_file + '-preview.webp'\n      }],\n      className: styles['project-detail-details-images'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    });\n  }) : null));\n};\nexport default ProjectDetailItem;","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/components/Projects/ProjectDetail/index.tsx"],"names":["React","useEffect","styles","LazyLoadImg","useResizeCallback","useForceUpdate","throttle","ProjectDetailItem","props","images","title","desc","links","tags","details","mainColor","detail_images_meta","video","affix_image_meta","videoRef","useRef","duration","currentTime","fake","played","setPlayed","useState","undefined","visible","setVisible","forceUpdate","progress","setProgress","current","document","onscroll","getBoundingClientRect","top","play","bottom","pause","addMustExecuteCallback","handleTimeUpdate","addEventListener","color","map","image","d","backgroundColor","t","length","fontSize","Array","from","num","_","i","common_file","dir","toString","type","src","link","className","v","width","position","height","transition","filter","display","opacity","float"],"mappings":"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","sourcesContent":["import React, { FC, useEffect } from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg, { LazyLoadImgProps } from '../../common/LazyLoadImg';\nimport { useResizeCallback } from '../../../utils/hooks/useResizeCallback';\nimport { useForceUpdate } from '../../../utils/hooks/useForceUpdate';\nimport throttle from 'lodash/throttle';\nexport interface ProjectDetailInfoProps {\n  images: LazyLoadImgProps[];\n  title: string;\n  desc: string[];\n  tags: string[];\n  details: string;\n  mainColor: string;\n  detail_images_meta: {\n    dir: string;\n    num: number;\n  };\n  links?: {\n    src: string\n    className: string,\n    desc: string\n  }[]\n  video?: [\n    {\n      src: string;\n    }\n  ];\n  affix_image_meta?: {\n    dir: string;\n    num: number;\n  };\n}\n\ntype IProps = ProjectDetailInfoProps;\n\nexport const ProjectDetailItem: FC<IProps> = (props: IProps) => {\n  const {\n    images,\n    title,\n    desc,\n    links,\n    tags,\n    details,\n    mainColor,\n    detail_images_meta,\n    video,\n    affix_image_meta\n  } = props;\n  const videoRef = React.useRef<any>({\n    duration: 0,\n    currentTime: 0,\n    fake: true\n  });\n  const [played, setPlayed] = React.useState<boolean | undefined>(undefined);\n  const [visible, setVisible] = React.useState<boolean>(false);\n  const { forceUpdate } = useForceUpdate();\n  const [progress, setProgress] = React.useState<number>(0);\n  useEffect(() => {\n    if (!videoRef.current.fake && document) {\n      document.onscroll = () => {\n        if (videoRef.current!.getBoundingClientRect().top < 700) {\n          if (played === undefined) {\n            videoRef.current.play();\n            setPlayed(true);\n          }\n        } else if (videoRef.current!.getBoundingClientRect().bottom < 150) {\n          videoRef.current.pause();\n          setPlayed(false);\n        }\n      };\n    }\n  }, [videoRef.current, document, played]);\n  const { addMustExecuteCallback } = useResizeCallback();\n  addMustExecuteCallback(() => {\n    forceUpdate();\n  });\n  useEffect(() => {\n    const handleTimeUpdate = throttle(() => {\n      setProgress(\n        (videoRef.current.currentTime / videoRef.current.duration) * 100\n      );\n    }, 500);\n    if (!videoRef.current.fake) {\n      videoRef.current.addEventListener('timeupdate', handleTimeUpdate);\n    }\n  }, [videoRef.current, setProgress]);\n\n  return (\n    <div\n      className={styles['project-detail-item']}\n      style={{\n        color: mainColor\n      }}\n    >\n      <div className={styles['project-detail-images']}>\n        {images.map(image => (\n          <LazyLoadImg {...image} className={styles['project-detail-image']} />\n        ))}\n      </div>\n      <div>\n        <div className={styles['project-detail-title']}>{title}</div>\n        <div className={styles['project-detail-subtitle']}>\n          {desc.map(d => (\n            <span>{d}</span>\n          ))}\n        </div>\n      </div>\n      <div\n        className={styles['project-detail-details']}\n        style={{\n          backgroundColor: mainColor\n        }}\n      >\n        <div className={styles['project-detail-tags']}>\n          {tags.map(t => (\n            <span>{t}</span>\n          ))}\n        </div>\n        {details.length > 0 && (\n          <span className={styles['project-detail-details-desc']}>\n            {details}\n          </span>\n        )}\n      </div>\n      <div\n        style={{\n          fontSize: 0\n        }}\n      >\n        {Array.from({ length: detail_images_meta.num }).map((_, i) => {\n          if (i === 0) {\n            return;\n          }\n          const common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n          return (\n            <LazyLoadImg\n              src={common_file + '.jpg'}\n              sources={[\n                {\n                  type: 'image/webp',\n                  src: common_file + '.webp'\n                }\n              ]}\n              preview_src={common_file + '-preview.jpg'}\n              preview_sources={[\n                { type: 'image/webp', src: common_file + '-preview.webp' }\n              ]}\n              className={styles['project-detail-details-images']}\n            />\n          );\n        })}\n        {\n          links.map(link => <a className={link.className} href={link.src} target={'blank'}>{link.desc}</a>)\n        }\n        {video\n          ? video.map(v => {\n              return (\n                <div\n                  style={{\n                    width: '1600rem',\n                    position: 'relative',\n                    height: '900rem',\n                    transition: '0.3s ease-in-out',\n                    filter: played == true ? 'none' : 'opacity(0.9)'\n                  }}\n                  onMouseEnter={() => {\n                    setVisible(true);\n                  }}\n                  onMouseLeave={() => {\n                    setVisible(false);\n                  }}\n                  onClick={() => {\n                    if (played) {\n                      videoRef.current.pause();\n                      setPlayed(false);\n                    } else {\n                      videoRef.current.play();\n                      setPlayed(true);\n                    }\n                  }}\n                >\n                  <div\n                    className={styles['project-detail-stop-icon']}\n                    style={{\n                      display: played == true ? 'none' : 'block'\n                    }}\n                  >\n                    PAUSE\n                  </div>\n                  <div\n                    style={{\n                      transition: '.4s ease',\n                      opacity: visible ? 1 : 0\n                    }}\n                    className={styles['project-detail-video-control-bar']}\n                  >\n                    <div className={styles['bar']}>\n                      <div\n                        className={styles['progress']}\n                        style={{\n                          width: progress + '%'\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <video\n                    src={v.src}\n                    ref={videoRef}\n                    autoPlay={false}\n                    style={{\n                      width: '1600rem',\n                      float: 'left'\n                    }}\n                  />\n                </div>\n              );\n            })\n          : null}\n        {affix_image_meta\n          ? Array.from({ length: affix_image_meta.num }).map((_, i) => {\n              if (i === 0) {\n                return;\n              }\n              const common_file =\n                affix_image_meta.dir +\n                '/' +\n                (detail_images_meta.num + i + 1).toString();\n              return (\n                <LazyLoadImg\n                  src={common_file + '.jpg'}\n                  sources={[\n                    {\n                      type: 'image/webp',\n                      src: common_file + '.webp'\n                    }\n                  ]}\n                  preview_src={common_file + '-preview.jpg'}\n                  preview_sources={[\n                    { type: 'image/webp', src: common_file + '-preview.webp' }\n                  ]}\n                  className={styles['project-detail-details-images']}\n                />\n              );\n            })\n          : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectDetailItem;\n"]},"metadata":{},"sourceType":"module"}
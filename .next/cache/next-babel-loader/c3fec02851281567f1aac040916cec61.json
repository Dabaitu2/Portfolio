{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getImageData, getCounts } from './helper';\nvar defaultOpts = {\n  ignore: [],\n  scale: 1\n};\nexport default function _callee(src, img) {\n  var opts,\n      _opts,\n      ignore,\n      scale,\n      data,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : defaultOpts;\n          opts = _objectSpread({}, defaultOpts, {}, opts);\n          _opts = opts, ignore = _opts.ignore, scale = _opts.scale;\n\n          if (scale > 1 || scale <= 0) {\n            console.warn(\"You set scale to \".concat(scale, \", which isn't between 0-1. This is either pointless (> 1) or a no-op (\\u2264 0)\"));\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getImageData(src, img, scale));\n\n        case 6:\n          data = _context.sent;\n          return _context.abrupt(\"return\", getCounts(data, ignore));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/tomokokawase/Desktop/Portfolio/utils/rgbaster/index.ts"],"names":["getImageData","getCounts","defaultOpts","ignore","scale","src","img","opts","console","warn","data"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,SAAvB,QAAwC,UAAxC;AAQA,IAAMC,WAAiB,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,KAAK,EAAE;AAFiB,CAA1B;AAKA,eAAe,iBACbC,GADa,EAEbC,GAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGbC,UAAAA,IAHa,2DAGAL,WAHA;AAKbK,UAAAA,IAAI,qBAAQL,WAAR,MAAwBK,IAAxB,CAAJ;AALa,kBAWTA,IAXS,EAQXJ,MARW,SAQXA,MARW,EASXC,KATW,SASXA,KATW;;AAab,cAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,CAA1B,EAA6B;AAC3BI,YAAAA,OAAO,CAACC,IAAR,4BACsBL,KADtB;AAGD;;AAjBY;AAAA,2CAmBMJ,YAAY,CAACK,GAAD,EAAMC,GAAN,EAAWF,KAAX,CAnBlB;;AAAA;AAmBPM,UAAAA,IAnBO;AAAA,2CAoBNT,SAAS,CAACS,IAAD,EAAOP,MAAP,CApBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { getImageData, getCounts } from './helper';\n\ninterface Opts {\n  ignore?: string[];\n  scale?: number;\n  skipTransparentPixels?: boolean;\n}\n\nconst defaultOpts: Opts = {\n  ignore: [],\n  scale: 1\n};\n\nexport default async function(\n  src: string,\n  img: HTMLImageElement,\n  opts: Opts = defaultOpts\n): Promise<{ color: string; count: number }[]> {\n  opts = { ...defaultOpts, ...opts };\n\n  const {\n    ignore, // for example, to ignore white and black:  [ 'rgb(0,0,0)', 'rgb(255,255,255)' ]\n    scale // 0 = best performance, lowest fidelity\n    // 1 = best fidelity, worst performance\n  } = opts;\n\n  if (scale > 1 || scale <= 0) {\n    console.warn(\n      `You set scale to ${scale}, which isn't between 0-1. This is either pointless (> 1) or a no-op (â‰¤ 0)`\n    );\n  }\n\n  const data = await getImageData(src, img, scale);\n  return getCounts(data, ignore);\n}\n"]},"metadata":{},"sourceType":"module"}
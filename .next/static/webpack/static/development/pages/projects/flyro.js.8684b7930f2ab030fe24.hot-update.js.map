{"version":3,"file":"static/webpack/static/development/pages/projects/flyro.js.8684b7930f2ab030fe24.hot-update.js","sources":["webpack:///./components/Projects/ProjectDetail/index.tsx"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport styles from './index.module.less';\nimport LazyLoadImg, { LazyLoadImgProps } from '../../common/LazyLoadImg';\nimport { useComponentDidMount } from '../../../utils/hooks/useComponentDidMount';\n\nexport interface ProjectDetailInfoProps {\n  images: LazyLoadImgProps[];\n  title: string;\n  desc: string[];\n  tags: string[];\n  details: string;\n  mainColor: string;\n  detail_images_meta: {\n    dir: string;\n    num: number;\n  };\n  video?: [\n    {\n      src: string;\n    }\n  ];\n  affix_image_meta?: {\n    dir: string;\n    num: number;\n  };\n}\n\ntype IProps = ProjectDetailInfoProps;\n\nexport const ProjectDetailItem: FC<IProps> = (props: IProps) => {\n  const {\n    images,\n    title,\n    desc,\n    tags,\n    details,\n    mainColor,\n    detail_images_meta,\n    video,\n    affix_image_meta\n  } = props;\n  const videoRef = React.useRef<any>();\n  const played = React.useRef(false);\n  useComponentDidMount(() => {\n    if (!videoRef.current) {\n      document.onscroll = () => {\n        if (videoRef.current.getBoundingClientRect().top < 700) {\n          if (!played.current) {\n            videoRef.current.play();\n            played.current = true;\n          }\n        } else if (videoRef.current.getBoundingClientRect().bottom < 150) {\n          if (played.current) {\n            videoRef.current.pause();\n            played.current = false;\n          }\n        }\n      };\n    }\n  });\n  return (\n    <div\n      className={styles['project-detail-item']}\n      style={{\n        color: mainColor\n      }}\n    >\n      <div className={styles['project-detail-images']}>\n        {images.map(image => (\n          <LazyLoadImg {...image} className={styles['project-detail-image']} />\n        ))}\n      </div>\n      <div>\n        <div className={styles['project-detail-title']}>{title}</div>\n        <div className={styles['project-detail-subtitle']}>\n          {desc.map(d => (\n            <span>{d}</span>\n          ))}\n        </div>\n      </div>\n      <div\n        className={styles['project-detail-details']}\n        style={{\n          backgroundColor: mainColor\n        }}\n      >\n        <div className={styles['project-detail-tags']}>\n          {tags.map(t => (\n            <span>{t}</span>\n          ))}\n        </div>\n        <span>{details}</span>\n      </div>\n      <div>\n        {Array.from({ length: detail_images_meta.num }).map((_, i) => {\n          if (i === 0) {\n            return;\n          }\n          const common_file = detail_images_meta.dir + '/' + (i + 1).toString();\n          return (\n            <LazyLoadImg\n              src={common_file + '.jpg'}\n              sources={[\n                {\n                  type: 'image/webp',\n                  src: common_file + '.webp'\n                }\n              ]}\n              preview_src={common_file + '-preview.jpg'}\n              preview_sources={[\n                { type: 'image/webp', src: common_file + '-preview.webp' }\n              ]}\n              className={styles['project-detail-details-images']}\n            />\n          );\n        })}\n        {window && video\n          ? video.map(v => {\n              return (\n                <div\n                  style={{\n                    width: '1600rem'\n                  }}\n                >\n                  <video\n                    src={v.src}\n                    poster={\n                      (window as any).isWebP ? images[0].sources[0].src : images[0].src\n                    }\n                    ref={videoRef}\n                    autoPlay={false}\n                    controls\n                    style={{\n                      width: '100%'\n                    }}\n                  />\n                </div>\n              );\n            })\n          : null}\n        {affix_image_meta\n          ? Array.from({ length: affix_image_meta.num }).map((_, i) => {\n              if (i === 0) {\n                return;\n              }\n              const common_file =\n                affix_image_meta.dir +\n                '/' +\n                (detail_images_meta.num + i + 1).toString();\n              return (\n                <LazyLoadImg\n                  src={common_file + '.jpg'}\n                  sources={[\n                    {\n                      type: 'image/webp',\n                      src: common_file + '.webp'\n                    }\n                  ]}\n                  preview_src={common_file + '-preview.jpg'}\n                  preview_sources={[\n                    { type: 'image/webp', src: common_file + '-preview.webp' }\n                  ]}\n                  className={styles['project-detail-details-images']}\n                />\n              );\n            })\n          : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectDetailItem;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAEA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAGA;AAEA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAEA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAKA;AAEA;;;;A","sourceRoot":""}